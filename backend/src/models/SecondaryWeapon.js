const mongoose = require('mongoose');
const { SECONDARY_WEAPON_TYPES } = require('../utils/constants');

const secondaryWeaponSchema = new mongoose.Schema({
  name: {
    type: String,
    required: [true, 'Nome da arma √© obrigat√≥rio'],
    trim: true,
    minlength: [2, 'Nome deve ter pelo menos 2 caracteres'],
    maxlength: [100, 'Nome deve ter no m√°ximo 100 caracteres']
  },
  type: {
    type: String,
    required: [true, 'Tipo da arma √© obrigat√≥rio'],
    enum: {
      values: SECONDARY_WEAPON_TYPES,
      message: 'Tipo deve ser um dos seguintes: {VALUE}'
    }
  },
  damage: {
    type: Number,
    required: [true, 'Dano √© obrigat√≥rio'],
    min: [0, 'Dano n√£o pode ser negativo'],
    max: [10000, 'Dano n√£o pode exceder 10000']
  },
  magazineSize: {
    type: Number,
    required: [true, 'Tamanho do carregador √© obrigat√≥rio'],
    min: [1, 'Carregador deve ter pelo menos 1 muni√ß√£o'],
    max: [50, 'Carregador n√£o pode exceder 50 muni√ß√µes']
  },
  reloadTime: {
    type: Number,
    required: [true, 'Tempo de recarga √© obrigat√≥rio'],
    min: [0.1, 'Tempo de recarga deve ser pelo menos 0.1 segundos'],
    max: [5, 'Tempo de recarga n√£o pode exceder 5 segundos']
  },
  description: {
    type: String,
    required: [true, 'Descri√ß√£o √© obrigat√≥ria'],
    trim: true,
    maxlength: [500, 'Descri√ß√£o deve ter no m√°ximo 500 caracteres']
  }
}, {
  timestamps: true,
  toJSON: { virtuals: true },
  toObject: { virtuals: true }
});

// üìä Virtual para Damage Per Magazine
secondaryWeaponSchema.virtual('damagePerMagazine').get(function () {
  return this.damage * this.magazineSize;
});

// üîç √çndices para performance
secondaryWeaponSchema.index({ name: 1 });
secondaryWeaponSchema.index({ type: 1 });
secondaryWeaponSchema.index({ damage: -1 });

// üõ°Ô∏è Middleware de valida√ß√£o
secondaryWeaponSchema.pre('save', function (next) {
  this.name = this.name.charAt(0).toUpperCase() + this.name.slice(1);
  next();
});

module.exports = mongoose.model('SecondaryWeapon', secondaryWeaponSchema);